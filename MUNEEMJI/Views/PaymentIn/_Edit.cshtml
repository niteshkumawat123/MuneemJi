@model PaymentInOutModel

<style>
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 25px;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .modal-title {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
        color: #495057;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6c757d;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

    .modal-close:hover {
        background-color: #e9ecef;
        color: #495057;
    }

    .modal-body {
        padding: 25px;
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        flex: 1;
    }

    .form-group.full-width {
        flex: 1 1 100%;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #495057;
        font-size: 14px;
    }

    .form-group label.required::after {
        content: ' *';
        color: #dc3545;
    }

    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .form-control select {
        cursor: pointer;
    }

    .btn-link {
        color: #007bff;
        text-decoration: none;
        font-size: 14px;
        border: none;
        background: none;
        padding: 0;
        cursor: pointer;
    }

    .btn-link:hover {
        text-decoration: underline;
    }

    .description-container {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .description-container.hidden {
        display: none;
    }

    .description-textarea {
        width: 100%;
        min-height: 100px;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
        resize: vertical;
        font-family: inherit;
    }

    .image-upload {
        margin-top: 10px;
        color: #6c757d;
        font-size: 24px;
        cursor: pointer;
        display: inline-block;
        padding: 10px;
        border: 1px dashed #dee2e6;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .image-upload:hover {
        background-color: #e9ecef;
        border-color: #ced4da;
    }

    .modal-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 25px;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .btn {
        padding: 10px 20px;
        border: 1px solid transparent;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: #ffffff;
    }

    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        color: #ffffff;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
        border-color: #545b62;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        color: #ffffff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }

    .right-side-fields {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .receipt-info {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .receipt-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .receipt-row:last-child {
        margin-bottom: 0;
    }

    .receipt-row label {
        margin-bottom: 0;
        font-weight: 500;
        color: #495057;
    }

    .receipt-row input {
        width: 120px;
        text-align: center;
    }

    .footer-actions {
        display: flex;
        gap: 10px;
    }

    @@media (max-width: 768px) {
        .form-row {
            flex-direction: column;
            gap: 15px;
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            flex-direction: column;
            gap: 10px;
        }

        .btn {
            width: 100%;
        }

        .footer-actions {
            flex-direction: column;
            width: 100%;
        }
    }
</style>

<div class="modal-header">
    <h3 class="modal-title">Payment-In</h3>
    <button type="button" class="modal-close" onclick="closeModal()">×</button>
</div>

<form id="paymentInEditForm" action="/PaymentIn/Edit" method="post" onsubmit="event.preventDefault(); handleFormSubmit(this);">
    <input type="hidden" name="Id" value="@Model.Id">
    
    <div class="modal-body">
        <div class="form-row">
            <div class="form-group" style="flex: 2;">
                <label for="PartyId" class="required">Party</label>
                <select name="PartyId" id="PartyId" class="form-control" required>
                    <option value="">Select Party</option>
                    @foreach (var party in ViewBag.Parties)
                    {
                        <option value="@party.Value">@party.Text</option>
                    }
                </select>
            </div>
            <div class="form-group right-side-fields">
                <div class="receipt-info">
                    <div class="receipt-row">
                        <label for="RefNo">Receipt No</label>
                        <input type="text" name="RefNo" id="RefNo" class="form-control" value="@Model.RefNo" required>
                    </div>
                    <div class="receipt-row">
                        <label for="Date">Date</label>
                        <input type="date" name="Date" id="Date" class="form-control" value="@Model.Date.ToString("yyyy-MM-dd")" required>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="PaymentType">Payment Type</label>
                <select name="PaymentType" id="PaymentType" class="form-control">
                    <option value="Cash" ></option>
                    <option value="Bank" ></option>
                    <option value="Card" ></option>
                    <option value="Online"> </option>
                </select>
            </div>
            <div class="form-group">
                <label for="CategoryName">Category</label>
                <input type="text" name="CategoryName" id="CategoryName" class="form-control" value="@Model.CategoryName">
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="Type">Type</label>
                <input type="text" name="Type" id="Type" class="form-control" value="@Model.Type">
            </div>
            <div class="form-group">
                <label for="Total">Total</label>
                <input type="number" name="Total" id="Total" class="form-control" step="0.01" value="@Model.Total" oninput="calculateBalance()">
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="PrintShare">Print/Share</label>
                <input type="text" name="PrintShare" id="PrintShare" class="form-control" value="@Model.PrintShare">
            </div>
            <div class="form-group">
                <label for="ReceivedPaid">Received</label>
                <input type="number" name="ReceivedPaid" id="ReceivedPaid" class="form-control" step="0.01" value="@Model.ReceivedPaid" oninput="calculateBalance()">
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="Balance">Balance</label>
                <input type="number" name="Balance" id="Balance" class="form-control" step="0.01" value="@Model.Balance" readonly>
            </div>
        </div>

        <div style="margin-top: 20px;">
            <button type="button" class="btn-link" onclick="toggleDescription()">
                ➕ Add Payment type
            </button>
        </div>

        <div style="margin-top: 15px;">
            <button type="button" class="btn-link" onclick="toggleDescription()">
                🔒 ADD DESCRIPTION
            </button>
        </div>

        <div id="descriptionContainer" class="description-container @(string.IsNullOrEmpty(Model.Description) ? "hidden" : "")">
            <textarea name="Description" id="Description" class="description-textarea" placeholder="Enter description here...">@Model.Description</textarea>
            <div class="image-upload" onclick="document.getElementById('imageInput').click()">
                📷
            </div>
            <input type="file" id="imageInput" accept="image/*" style="display: none;">
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-danger" onclick="deletePayment(@Model.Id)">Delete</button>
        <div class="footer-actions">
            <button type="button" class="btn btn-secondary" onclick="closeModal()">Share</button>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</form>

<script>
    function toggleDescription() {
        const container = document.getElementById('descriptionContainer');
        container.classList.toggle('hidden');
    }

    function calculateBalance() {
        const total = parseFloat(document.getElementById('Total').value) || 0;
        const received = parseFloat(document.getElementById('ReceivedPaid').value) || 0;
        const balance = total - received;
        document.getElementById('Balance').value = balance.toFixed(2);
    }

    function deletePayment(id) {
        if (confirm('Are you sure you want to delete this payment record?')) {
            fetch('/PaymentIn/Delete/' + id, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    closeModal();
                    location.reload();
                } else {
                    alert('An error occurred while deleting the record.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the record.');
            });
        }
    }

    // Initialize balance calculation on page load
    document.addEventListener('DOMContentLoaded', function() {
        calculateBalance();
    });
</script>